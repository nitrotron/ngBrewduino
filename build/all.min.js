!function(){angular.module("app",["timer","ui.router","googlechart","ngAnimate","toaster","app.logger"])}(),function(){var t="http://localhost:51887/SerialSwitch";angular.module("app").value("basePortUrl",t)}(),function(){function t(){}angular.module("app").controller("appCtrl",t)}(),function(){angular.module("app").config(["$stateProvider","$urlRouterProvider",function(t,e){e.otherwise("/classic"),t.state("classic",{url:"/classic",templateUrl:"App/brewduino/brewduino.html"}).state("dashboard",{url:"/dashboard/:id",templateUrl:"App/brewduino/thermoDashBoard.html"}).state("settings",{url:"/settings/:id",templateUrl:"App/settings/settingsForm.html"}).state("cdtAdd",{url:"/cdtAdd/:id",templateUrl:"App/countDownTimerForm/countDownTimerForm.html"})}])}(),function(){function t(t,e,r,i,n){return{c:[{v:t},{v:e},{v:r},{v:i},{v:n}]}}var e={};e.type="AreaChart",e.cssStyle="height:400px; width:100%; float:left;",e.data={cols:[],rows:[]},e.data.cols.push({id:"Time",label:"Time",type:"string",p:{}}),e.data.cols.push({id:"t0",label:"RIMS",type:"number",p:{}}),e.data.cols.push({id:"t1",label:"Mash",type:"number",p:{}}),e.data.cols.push({id:"t2",label:"HLT/Kettle2",type:"number",p:{}}),e.data.cols.push({id:"t3",label:"Kettle",type:"number"}),e.data.rows.push(t("10:30",115,100,106,200)),e.data.rows.push(t("10:31",117,110,106,208)),e.data.rows.push(t("10:32",118,120,106,210)),e.data.rows.push(t("10:33",115,130,106,205)),e.data.rows.push(t("10:34",120,145,105,205)),e.data.rows.push(t("10:35",123,150,104,204)),e.data.rows.push(t("10:36",123,155,103,199)),e.data.rows.push(t("10:37",125,156,106,201)),e.data.rows.push(t("10:38",125,158,105,203)),e.data.rows.push(t("10:39",126,159,106,206)),e.data.rows.push(t("10:40",128,160,105,206)),e.data.rows.push(t("10:41",128,160,106,208)),e.options={title:"Temperatures",titleTextStyle:{color:"#D3D3D4"},isStacked:"false",fill:20,curveType:"function",trendlines:{0:{type:"linear",color:"green",lineWidth:3,opacity:.3,showR2:!0,visibleInLegend:!0},1:{type:"linear",color:"green",lineWidth:"3",opacity:"0.3",showR2:"true",visibleInLegend:"true"}},displayExactValues:!0,vAxis:{title:"Temperature unit",gridlines:{count:6,color:"#D3D3D4"},titleTextStyle:{color:"#D3D3D4"},textStyle:{color:"#D3D3D4"}},hAxis:{title:"Date",gridlines:{color:"#D3D3D4"},titleTextStyle:{color:"#D3D3D4"},textStyle:{color:"#D3D3D4"}},legend:{textStyle:{color:"#D3D3D4"}},backgroundColor:"#353E42",colors:["#67DC2D","#19fcfc","#FC1919","#FC8B19"]},e.formatters={};var r={thermometers:[{id:0,temp:100,highAlarm:200,lowAlarm:15,name:"RIMs",isRIMS:!0},{id:1,temp:110,highAlarm:210,lowAlarm:25,name:"Mash"},{id:2,temp:120,highAlarm:220,lowAlarm:35,name:"HLT"},{id:3,temp:130,highAlarm:230,lowAlarm:45,name:"Kettle"}],TotalTimers:12,rimsEnable:!1,auxOn:!1,pumpOn:!1,WhichThermoAlarm:"kettle",TimersNotAllocated:3,Kp:200,Ki:1,kd:1,SetPoint:100,WindowSize:5e3,TempAlarmActive:!1,TimerAlarmActive:!1};angular.module("app").value("stubData",r).value("chartData",e)}(),function(){function t(t){function e(e){return t.sendCmd(g.clearTempAlarms,e)}function r(e){return t.getStatus(e)}function i(){return t.sendCmd(g.resetAlarm,"")}function n(e){return t.sendCmd(g.turnOnAux,e?1:0)}function o(e,r){return t.sendCmd(g.setTempAlarmHigh,e+","+r)}function s(e,r){return t.sendCmd(g.setTempAlarmLow,e+","+r)}function a(e){return t.sendCmd(g.setPIDSetPoint,e)}function l(e){return t.sendCmd(g.setPIDWindowSize,e)}function m(e){return t.sendCmd(g.setPIDKp,e)}function c(e){return t.sendCmd(g.setPIDKi,e)}function d(e){return t.sendCmd(g.setPIDKd,e)}function u(e){return t.sendCmd(g.turnOnPump,e?1:0)}function p(e){return t.sendCmd(g.turnOnRims,e?1:0)}function h(e){return t.sendCmd(g.setTimer,e)}var g={returnUnknownCmd:0,returnStatus:1,getTemps:2,getTemp:3,getSensors:4,getSensor:5,getTempAlarms:6,setTempAlarmHigh:7,setTempAlarmLow:8,clearTempAlarms:9,getTimer:10,setTimer:11,resetAlarm:12,getAlarmStatus:13,startLogging:14,stopLogging:15,setPIDSetPoint:16,setPIDWindowSize:17,setPIDKp:18,setPIDKi:19,setPIDKd:20,turnOnRims:21,turnOnPump:22,turnOnAux:23,setInitialClock:24,setDebugModeOn:25};return{cmds:g,clearAlarms:e,getStatus:r,resetAlarm:i,setAuxPower:n,setHighAlarms:o,setLowAlarms:s,setPidSetPoint:a,setPidWindowSize:l,setPidKp:m,setPidKi:c,setPidKd:d,setPumpsPower:u,setRimsPower:p,setTimer:h}}angular.module("app").factory("brewduinoCmdsSrv",t),t.$inject=["brewduionoDataSrv"]}(),function(){function t(t,e,r,i,n,o){function s(){m(),u.auxBtn=u.stubData.auxOn,u.pumpBtn=u.stubData.pumpOn,u.rimsBtn=u.stubData.rimsEnable,u.showStatusLog=o.showStatusLog,n.info("Now viewing Classic theme")}function a(){i.resetAlarm()}function l(t){e.auxOn=u.auxBtn,i.setAuxPower(t)}function m(){i.getStatus(u.stubData).then(function(t){u.stubData=t,n.info("Resolved Data",u.stubData)})}function c(t){e.pumpOn=t,i.setPumpsPower(t)}function d(t){e.rimsEnable=t,i.setRimsPower(t)}var u=this;u.stubData={},u.alarmClick=a,u.auxClick=l,u.pumpClick=c,u.rimsClick=d,s()}angular.module("app").controller("brewduinoCtrl",t),t.$inject=["$interval","stubData","brewduionoDataSrv","brewduinoCmdsSrv","logger","settingsSrv"]}(),function(){function t(t,e,r,i){function n(i){if(e.useMockServer===!0)return r.getStatus(i).then(s,o)["catch"](o);var n=e.brewduinoUrlAndPort+"/GetStatus";return t.get(n).success(function(t){i=t})}function o(t){i.error("XHR Failed for getStatus."+t.data)}function s(t){return i.info("Successful getStatus"),t}function a(i,n){if(e.useMockServer===!0)return r.sendCmd(i,n);var o=e.brewduinoUrlAndPort+"/SendCommand/"+i+"/"+n;return t.post(o)}return{getStatus:n,sendCmd:a}}angular.module("app").factory("brewduionoDataSrv",t),t.$inject=["$http","settingsSrv","mockRestSrv","logger"]}(),function(){function t(t,e,r){function i(){d=new Date}function n(){c.showAddTimerPanel=!0}function o(t,i){c.showAddTimerPanel=!1;var n=new Date;n.setSeconds(n.getSeconds()+60*t);var o={id:u,timer:n,label:i,isActive:!0};u++,r.push(o),d=new Date,e.setTimer(t)}function s(){c.showAddTimerPanel=!1}function a(e){e.isActive=!1,t.$apply()}function l(){c.timers.filter(function(t){return t.isActive})}function m(t){return 0>t-d?1:(t-d)/1e3}var c=this,d=new Date;c.timers=r,c.showAddTimerPanel=!1,c.addTimer=n,c.startNewTimer=o,c.cancelNewTimer=s,c.getTimer=m,c.timerExpired=a,c.removeExpiredTimers=l;var u=0;i()}angular.module("app").controller("countDownTimer",t),t.$inject=["$scope","brewduinoCmdsSrv","countDownTimersVal"]}(),function(){var t=[];angular.module("app").value("countDownTimersVal",t)}(),function(){function t(t,e,r,i,n){function o(){f.auxBtn=e.auxOn,f.pumpBtn=e.pumpOn,f.rimsBtn=e.rimsEnable,f.otherThermos=p(),e.thermometers.forEach(function(e,r){e.chartEnabled=r===Number(t.params.id)?!0:!1}),f.chartData.view={columns:u()},i.info("Activated "+f.thermo.name+" Dashboard")}function s(){var e={id:t.params.id};t.go("cdtAdd",e)}function a(){f.auxBtn=!f.auxBtn,e.auxOn=f.auxBtn}function l(t){f.chartData.type=t}function m(){f.chartData.view={columns:u()}}function c(){f.showMenu=!1}function d(){f.showMenu=!0}function u(){var t=[0];return e.thermometers.forEach(function(e){e.chartEnabled&&t.push(e.id+1)}),t}function p(){var r=[];return e.thermometers.forEach(function(e,i){i!==Number(t.params.id)&&r.push(e)}),r}function h(){f.pumpBtn=!f.pumpBtn,e.pumpOn=f.pumpBtn}function g(){f.rimsBtn=!f.rimsBtn,e.rimsEnable=f.rimsBtn}function b(){f.alarmBtn=!f.alarmBtn}function v(){var e={id:t.params.id};t.go("settings",e)}function w(e){var r={id:e.id};t.go("dashboard",r)}var f=this;f.addTimer=s,f.alarmBtn=!1,f.auxBtn=e.auxOn,f.auxClick=a,f.chartData=r,f.chartTypeArea=!0,f.chartTypeLine=!1,f.changeChartType=l,f.chBxChartChanged=m,f.closeMenu=c,f.openMenu=d,f.pumpBtn=e.pumpOn,f.pumpClick=h,f.rimsBtn=e.rimsEnable,f.rimsClick=g,f.setAlarm=b,f.settingsClick=v,f.showMenu=!1,f.showStatusLog=n.showStatusLog,f.otherThermos=[],f.switchTemps=w,f.thermometersList=[e.thermometers[t.params.id]],f.thermo=e.thermometers[t.params.id],o()}angular.module("app").controller("brewingThermoItem",t),t.$inject=["$state","stubData","chartData","logger","settingsSrv"]}(),function(){function t(t,e){function r(t,e,r){u=r,d.curPnlAlarm.temperature=t,d.curPnlAlarm.whichAlarm=e,d.curPnlAlarm.whichAlarmDis=e.replace("Alarm","").replace(/\w\S*/g,function(t){return t.charAt(0).toUpperCase()+t.substr(1).toLowerCase()})}function i(t){return angular.isObject(t)&&angular.isDefined(t.isRIMS)&&t.isRIMS===!0}function n(){d.rimsSettingVisible=d.rimsSettingVisible===!0?!1:!0}function o(t){return t.id===u}function s(e){angular.isNumber(d.curPnlAlarm.temperature)&&(angular.isDefined(e[d.curPnlAlarm.whichAlarm])&&(e[d.curPnlAlarm.whichAlarm]=d.curPnlAlarm.temperature,"highAlarm"===d.curPnlAlarm.whichAlarm?t.setHighAlarms(e.id,d.curPnlAlarm.temperature):"lowAlarm"===d.curPnlAlarm.whichAlarm&&t.setLowAlarms(e.id,d.curPnlAlarm.temperature)),u=-1)}function a(){u=-1}function l(){d.rimsSettingVisible=!1,t.setPidSetPoint(d.rimsSetPoint),t.setPidWindowSize(d.rimsWindowSize),t.setPidKp(d.rimsKp),t.setPidKi(d.rimsKi),t.setPidKd(d.rimsKd)}function m(){d.rimsSettingVisible=!1}function c(t){var r={id:t.id};e.go("dashboard",r)}var d=this;d.rimsSetPoint=2e3,d.rimsWindowSize=5e3,d.rimsKp=5,d.rimsKi=.5,d.rimsKd=1,d.openAlarmPanel=r,d.showRimsButton=i,d.showRimsSettings=n,d.rimsSettingVisible=!1,d.showPnlAlarm=o,d.curPnlAlarm={},d.btnUpdateAlarmsClick=s,d.btnCancelAlarmsClick=a,d.btnUpdateRimsClick=l,d.btnUpdateRimsCancelClick=m,d.openThermoDashboard=c;var u=-1}angular.module("app").controller("brewingThermometer",t),t.$inject=["brewduinoCmdsSrv","$state"]}(),function(){function t(t,e,r,i){function n(n,o){var s=new Date;s.setSeconds(s.getSeconds()+60*n);var a=r.length+1,l={id:a,timer:s,label:o,isActive:!0};a++,r.push(l),e.setTimer(n),i.pop("success",o,"Added Timer "+n+" Minutes");var m={id:t.params.id};t.go("dashboard",m)}function o(){var e={id:t.params.id};t.go("dashboard",e)}var s=this;s.addTimer=n,s.cancelAddTimer=o}angular.module("app").controller("countDownTimerFormCtrl",t),t.$inject=["$state","brewduinoCmdsSrv","countDownTimersVal","toaster"]}(),function(){"use strict";angular.module("app.logger",[])}(),function(){function t(t,e,r){function i(i,n,o){r.showToast.error===!0&&e.error(i,o),t.error("Error: "+i,n)}function n(i,n,o){r.showToast.info===!0&&e.info(i,o),t.info("Info: "+i,n)}function o(i,n,o){r.showToast.success===!0&&e.success(i,o),t.info("Success: "+i,n)}function s(i,n,o){r.showToast.warning===!0&&e.warning(i,o),t.warn("Warning: "+i,n)}var a={showToasts:!0,error:i,info:n,success:o,warning:s,log:t.log};return a}angular.module("app.logger").factory("logger",t),t.$inject=["$log","toaster","settingsSrv"]}(),function(){function t(t,e,r){function i(i){var n=t.defer();return i=r,e(function(){n.resolve(r)},2e3),n.promise}function n(){var i=t.defer();e(function(){i.resolve(r)},2e3)}return{getStatus:i,sendCmd:n}}angular.module("app").factory("mockRestSrv",t),t.$inject=["$q","$timeout","stubData"]}(),function(){function t(t,e){function r(){s.settings={useStubData:e.useStubData,useMockServer:e.useMockServer,url:e.brewduinoUrlAndPort,showStatusLog:e.showStatusLog,showToast:e.showToast}}function i(){var e={id:t.params.id};t.go("dashboard",e)}function n(e){o(e);var r={id:t.params.id};t.go("dashboard",r)}function o(t){e.useStubData=t.useStubData,e.useMockServer=t.useMockServer,e.brewduinoUrlAndPort=t.url,e.showStatusLog=t.showStatusLog,e.showToast=t.showToast}var s=this;s.settings={},s.cancel=i,s.submit=n,r()}angular.module("app").controller("settingsFormCtrl",t),t.$inject=["$state","settingsSrv"]}(),function(){var t={};angular.module("app").value("settingsSrv",t),t.useStubData=!0,t.useMockServer=!0,t.showStatusLog=!1,t.brewduinoUrlAndPort="http://localhost:51887/SerialSwitch",t.showToast={error:!0,info:!0,success:!0,warning:!0}}(),function(){function t(t){var e=this;e.statusInfo=t}angular.module("app").controller("statusLogCtrl",t),t.$inject=["stubData"]}(),angular.module("app").run(["$templateCache",function(t){t.put("App/brewduino/brewduino.html",'<link href=Fonts/fontello-374a6348/css/misc.css rel=stylesheet type=text/css><style>\r\n    body {\r\n        background-color: white;\r\n    }\r\n</style><div id=pnlMain ng-controller="brewduinoCtrl as brewduino"><div id=RimsPanelMain><div id=RimsThermometers><div class=RimsThermometer ng-include="\'App/brewingThermometer/brewingThermometer.html\'" ng-repeat="thermometers in brewduino.stubData.thermometers"></div><div class=CountDownTimer><div ng-include="\'App/countDownTimer/countDownTimerClassic.html\'"></div></div></div><div id=buttonRow><div class=SwitchWrapper><div class=switch id=switchReset><input type=checkbox ng-model=brewduino.alarmBtn ng-click=brewduino.alarmClick(brewduino.alarmBtn)> <label><i class=icon-attention-alt></i>Alarm</label></div></div><div class=SwitchWrapper><div class=switch id=switchRimsOn><input type=checkbox ng-model=brewduino.rimsBtn ng-click=brewduino.rimsClick(brewduino.rimsBtn)> <label><i class=icon-fire-1></i>RIMS</label></div></div><div class=SwitchWrapper><div class=switch id=switchPumpOn><input type=checkbox ng-model=brewduino.pumpBtn ng-click=brewduino.pumpClick(brewduino.pumpBtn)> <label><i class=icon-off></i>Pump</label></div></div><div class=SwitchWrapper><div class=switch id=switchAuxPower><input type=checkbox ng-model=brewduino.auxBtn ng-click=brewduino.auxClick(brewduino.auxBtn)> <label><i class=icon-off></i>Aux</label></div></div><span class=Stretch></span></div></div><div ng-if=brewduino.showStatusLog ng-include="\'App/statusLog/statusLog.html\'"></div></div>'),t.put("App/brewduino/thermoDashBoard.html",'<link href=3rdParty/css/bootstrap.nightly.css rel=stylesheet><div id=dashBoardMain ng-controller="brewingThermoItem as brewingThermoItem" class=container-fluid><div class="dashboard-slide-menu panel panel-default" ng-show=brewingThermoItem.showMenu style="margin-left: -15px"><ul><li><label><i class=icon-plus ng-click=brewingThermoItem.closeMenu()></i></label></li><li><label ng-click=brewingThermoItem.setAlarm() ng-class="{\'alarmBtn-dashboard\': brewingThermoItem.alarmBtn === true }"><i class=icon-attention-alt></i>Alarm</label></li><li><label ng-click=brewingThermoItem.addTimer()><i class="fa fa-fa fa-clock-o" style="color: white"></i><br>Timer</label></li><li><label ng-click=brewingThermoItem.rimsClick() ng-class="{\'rimsBtn-dashboard\': brewingThermoItem.rimsBtn === true }"><i class=icon-fire-1></i>RIMS</label></li><li><label ng-click=brewingThermoItem.pumpClick() ng-class="{\'pumpBtn-dashboard\': brewingThermoItem.pumpBtn === true }"><i class=icon-off></i>Pump</label></li><li><label ng-click=brewingThermoItem.auxClick() ng-class="{\'auxBtn-dashboard\': brewingThermoItem.auxBtn === true }"><i class=icon-off></i>Aux</label></li><li><label ng-click=brewingThermoItem.settingsClick()><i class=icon-dot-circled></i>Settings</label></li></ul></div><div class=row><div class=col-xs-12><i class=icon-menu ng-click=brewingThermoItem.openMenu()></i></div></div><div id=dashBoardHeader class="dashBoardHeader clearfix"><div class=row><div class="col-sm-3 col-xs-6"><div class=CountDownTimer2 ng-include="\'App/countDownTimer/countDownTimer.html\'"></div></div><div class="col-sm-3 col-xs-6" ng-repeat="otherThermo in brewingThermoItem.otherThermos" ng-click=brewingThermoItem.switchTemps(otherThermo)><span class="dashboard-minor-title text-color5">{{otherThermo.name}}</span> <span class="dashboard-minor-temp text-color5">{{otherThermo.temp}}</span></div></div></div><div class=row><div class=col-md-3><div class=row><div class="col-xs-6 h1 text-color1">{{brewingThermoItem.thermo.name}}</div><div class="col-xs-6 h1 text-color1">{{brewingThermoItem.thermo.temp}}</div></div><div class=row><div class="col-xs-1 h6 text-color4">High:</div><div class="col-xs-5 h6 text-color4">{{brewingThermoItem.thermo.highAlarm}}</div><div class="col-xs-1 h6 text-color4">Low:</div><div class="col-xs-5 h6 text-color4">{{brewingThermoItem.thermo.lowAlarm}}</div></div></div><div class=col-md-9><div class=row><div class=col-sm-10><div google-chart="" chart=brewingThermoItem.chartData style={{brewingThermoItem.chartData.cssStyle}}></div>&nbsp;</div><div class=col-sm-2><div class="panel panel-default"><div class=panel-heading>Chart Key</div><div class=panel-body><div ng-repeat="thermo in brewingThermoItem.otherThermos"><input type=checkbox name=chBxChart{{thermo.id}} ng-model=thermo.chartEnabled ng-click=brewingThermoItem.chBxChartChanged(thermo)>{{thermo.name}}</div><br><br><h4>Chart Type:</h4><input type=radio name=chartRadio ng-model=brewingThermoItem.chartData.type value=AreaChart>Area<br><input type=radio name=chartRadio ng-model=brewingThermoItem.chartData.type value=LineChart>Line</div></div></div></div></div></div><div ng-if=brewingThermoItem.showStatusLog ng-include="\'App/statusLog/statusLog.html\'"></div></div><a ui-sref=classic class=text-color2>classic theme</a>'),t.put("App/brewingThermometer/brewingThermometer.html",'<div id=BrewingThermometerMain ng-controller="brewingThermometer as brewingThermometer"><span id=lblTitle class=BrewingThermometer_Title>{{thermometers.name}}</span><br><div id=BrewingThermometer_Display><div id=lblCurrentTemp class=TemperatureDigital ng-click=brewingThermometer.openThermoDashboard(thermometers)>{{thermometers.temp}}</div><div id=btnTempHighAlarm class=TemperatureDigitalSmallTop ng-click="brewingThermometer.openAlarmPanel(thermometers.highAlarm,\'highAlarm\', thermometers.id)">{{thermometers.highAlarm}}</div><div id=btnTempLowAlarm class=TemperatureDigitalSmallBottom ng-click="brewingThermometer.openAlarmPanel(thermometers.lowAlarm,\'lowAlarm\', thermometers.id)">{{thermometers.lowAlarm}}</div><div id=pnlRimsButton ng-if=brewingThermometer.showRimsButton(thermometers)><span ng-click=brewingThermometer.showRimsSettings() class=Clickable><i class=icon-beer></i>RIMS Settings</span><form name=rimsForm class=form-horizontal><table ng-show=brewingThermometer.rimsSettingVisible class=pnlRimsControls style="border-collapse:separate; border-spacing:5px;"><tr><td class=RimsSettingLabel>Set Point:</td><td class=RimsSettingTB><input type=number id=tbSetPoint ng-model=brewingThermometer.rimsSetPoint></td></tr><tr><td class=RimsSettingLabel>WindowSize:</td><td class=RimsSettingTB><input type=number id=tbWindowSize ng-model=brewingThermometer.rimsWindowSize></td></tr><tr><td class=RimsSettingLabel>Kp:</td><td class=RimsSettingTB><input type=number id=tbKp ng-model=brewingThermometer.rimsKp></td></tr><tr><td class=RimsSettingLabel>Ki:</td><td class=RimsSettingTB><input type=number id=tbKi ng-model=brewingThermometer.rimsKi></td></tr><tr><td class=RimsSettingLabel>Kd:</td><td class=RimsSettingTB><input type=number id=tbKd ng-model=brewingThermometer.rimsKd></td></tr><tr><td colspan=2><span class=error ng-show=rimsForm.tbSetPoint.$error.number>ERROR!</span></td></tr><tr><td></td><td class=RimsSettingTB><button id=btnUpdateRims ng-click=brewingThermometer.btnUpdateRimsClick() class=btnUpdateRims>Submit</button> <button id=btnUpdateRimsCancel ng-click=brewingThermometer.btnUpdateRimsCancelClick() class=btnUpdateRims>Cancel</button></td></tr></table></form></div><div id=pnlSetAlarm class=PanelOverlay ng-show=brewingThermometer.showPnlAlarm(thermometers)><form name=alarmForm class=form-horizontal><legend style=color:black>{{brewingThermometer.curPnlAlarm.whichAlarmDis}} Alarm</legend><div class=form-group><div class=col-xs-12><input type=number id=tbAlarm name=tbAlarm class=form-control min=-67 max=257 placeholder={{brewingThermometer.curPnlAlarm.temperature}} ng-model=brewingThermometer.curPnlAlarm.temperature></div></div><div class=form-group><div class=col-xs-12><button id=btnCancelAlarms class="btn btn-default" ng-click=brewingThermometer.btnCancelAlarmsClick()>Cancel</button> <button id=btnUpdateAlarms class="btn btn-info" ng-click=brewingThermometer.btnUpdateAlarmsClick(thermometers)>Update</button></div></div></form></div></div></div>'),t.put("App/countDownTimer/countDownTimer.html",'<div id=countDownTimer ng-controller="countDownTimer as countDownTimer"><div style="width: 210px"></div><div id=divCountdown ng-repeat="timer in countDownTimer.timers"><span ng-class="{true: \'clock\',false: \'clockExpired\'}[timer.isActive]"><timer countdown=countDownTimer.getTimer(timer.timer) interval=1000 finish-callback=countDownTimer.timerExpired(timer)>{{hhours}}:{{mminutes}}:{{sseconds}}</timer>{{timer.label}}</span></div><div id=pnlAddTimer ng-show=countDownTimer.showAddTimerPanel><table><tr><td></td><td style="text-align: right;"><span id=dvCancelTimer class=cancelX ng-click=countDownTimer.cancelNewTimer()>X</span></td></tr><tr><td style="text-align: right; width: 20%;">Minutes:</td><td style="text-align: left;"><input type=number id=tbNewTime name=tbNewTime ng-model=newTimer></td></tr><tr><td style="text-align: right;">Title:</td><td style="text-align: left;"><input type=text id=tbTimerLabel name=tbTimerLabel ng-model=newTimerLabel></td></tr><tr><td></td><td style="text-align: right;"><button type=button id=btnAddNewTimer ng-click="countDownTimer.startNewTimer(newTimer, newTimerLabel)">Start</button></td></tr></table></div></div>'),t.put("App/countDownTimer/countDownTimerClassic.html",'<div id=countDownTimer ng-controller="countDownTimer as countDownTimer"><div id=btnShowNewTimerPanel class=Clickable ng-click=countDownTimer.addTimer()><i class="fa fa-fa fa-clock-o"></i>Click for New Timer</div><div style="width: 210px"></div><div id=divCountdown ng-repeat="timer in countDownTimer.timers"><span ng-class="{true: \'clock\',false: \'clockExpired\'}[timer.isActive]"><timer countdown=countDownTimer.getTimer(timer.timer) interval=1000 finish-callback=countDownTimer.timerExpired(timer)>{{hhours}}:{{mminutes}}:{{sseconds}}</timer>{{timer.label}}</span></div><div id=pnlAddTimer ng-show=countDownTimer.showAddTimerPanel><form name=addTimer class=form-horizontal><div class=form-group><label for=minutes class="col-xs-12 control-label" style=text-align:left>Minutes</label><div class=col-xs-12><input type=number min=0.2 class=form-control id=minutes placeholder=Minutes ng-model=countDownTimer.minutes></div></div><div class=form-group><label for=timerTitle class="control-label col-xs-12" style=text-align:left>Title</label><div class=col-xs-12><input type=text class=form-control id=timerTitle placeholder=Title ng-model=countDownTimer.title></div></div><div class=form-group><div class=col-xs-12><button type=button class="btn btn-default" ng-click=countDownTimer.cancelNewTimer()>Cancel</button> <button type=button class="btn btn-info" ng-click="countDownTimer.startNewTimer(countDownTimer.minutes, countDownTimer.title)">Start</button></div></div></form></div></div>'),t.put("App/countDownTimerForm/countDownTimerForm.html",'<div ng-controller="countDownTimerFormCtrl as cdtFormCtrl"><form name=addTimerForm class=form-horizontal><legend>Add Count Down Timer</legend><div class=form-group><label for=minutes class="col-md-2 control-label">Minutes</label><div class=col-md-10><input type=number min=0.2 class=form-control id=minutes placeholder=Minutes ng-model=cdtFormCtrl.minutes></div></div><div class=form-group><label for=timerTitle class="col-md-2 control-label">Title</label><div class=col-md-10><input type=text class=form-control id=timerTitle placeholder=Title ng-model=cdtFormCtrl.title></div></div><div class=form-group><div class="col-md-10 col-md-offset-2"><button type=button class="btn btn-default" ng-click=cdtFormCtrl.cancelAddTimer()>Cancel</button> <button type=button class="btn btn-info" ng-click="cdtFormCtrl.addTimer(cdtFormCtrl.minutes, cdtFormCtrl.title)">Start</button></div></div></form></div>'),t.put("App/settings/settingsForm.html",'<div ng-controller="settingsFormCtrl as settingsFormCtrl" class=container><form name=settingsForm class=form-horizontal><legend>Settings</legend><div class=form-group><div class="col-md-10 col-md-offset-2"><div class=checkbox><label><input type=checkbox ng-model=settingsFormCtrl.settings.useStubData> Use stubData</label></div></div></div><div class=form-group><div class="col-md-10 col-md-offset-2"><div class=checkbox><label><input type=checkbox ng-model=settingsFormCtrl.settings.useMockServer> Enable mock server</label></div></div></div><div class=form-group><div class="col-md-10 col-md-offset-2"><div class=checkbox><label><input type=checkbox ng-model=settingsFormCtrl.settings.showStatusLog> Show Status Log</label></div></div></div><div class="panel panel-default"><div class=panel-heading>Informational Popups</div><div class=panel-body><div class=form-group><div class="col-md-10 col-md-offset-2"><div class=checkbox><label><input type=checkbox ng-model=settingsFormCtrl.settings.showToast.error> Show Errors</label></div></div></div><div class=form-group><div class="col-md-10 col-md-offset-2"><div class=checkbox><label><input type=checkbox ng-model=settingsFormCtrl.settings.showToast.info> Show Info</label></div></div></div><div class=form-group><div class="col-md-10 col-md-offset-2"><div class=checkbox><label><input type=checkbox ng-model=settingsFormCtrl.settings.showToast.success> Show Success</label></div></div></div><div class=form-group><div class="col-md-10 col-md-offset-2"><div class=checkbox><label><input type=checkbox ng-model=settingsFormCtrl.settings.showToast.warning> Show Warning</label></div></div></div></div></div><div class=form-group><label for=brewduinoUrlAndPort class="col-md-2 control-label">BrewDuino URL and Port</label><div class=col-md-10><input type=text class=form-control id=brewduinoUrlAndPort name=brewduinoUrlAndPort placeholder={{settingsFormCtrl.currentSrvUrl}} ng-model=settingsFormCtrl.settings.url></div></div><div class=form-group><div class="col-md-10 col-md-offset-2"><button type=button class="btn btn-default" ng-click=settingsFormCtrl.cancel()>Cancel</button> <button type=button class="btn btn-info" ng-click=settingsFormCtrl.submit(settingsFormCtrl.settings)>Submit</button></div></div></form></div>'),t.put("App/statusLog/statusLog.html",'<div ng-controller="statusLogCtrl as sl"><pre class=statusLog>{{sl.statusInfo | json}}</pre></div>')}]);