!function(){angular.module("app",["timer","ui.router","googlechart","ngAnimate","toaster","app.logger","ngAnimate"])}(),function(){var t="http://localhost:51887/SerialSwitch";angular.module("app").value("basePortUrl",t)}(),function(){function t(){}angular.module("app").controller("appCtrl",t)}(),function(){angular.module("app").config(["$stateProvider","$urlRouterProvider",function(t,e){e.otherwise("/classic"),t.state("classic",{url:"/classic",templateUrl:"App/brewduino/brewduino.html"}).state("dashboard",{url:"/dashboard/:id",templateUrl:"App/dashboard/dashboard.html"}).state("settings",{url:"/settings/:id",templateUrl:"App/settings/settingsForm.html"}).state("cdtAdd",{url:"/cdtAdd/:id",templateUrl:"App/countDownTimerForm/countDownTimerForm.html"}).state("rimsSettings",{url:"/rimsSettings/:id",templateUrl:"App/rimsSettings/rimsSettingsForm.html"}).state("dbSettings",{url:"/dbSettings/:id",templateUrl:"App/dbSettings/dbSettingsForm.html"})}])}(),function(){function t(t,e,r,i,n){return{c:[{v:t},{v:e},{v:r},{v:i},{v:n}]}}var e={};e.type="AreaChart",e.cssStyle="height:400px; width:100%; float:left;",e.data={cols:[],rows:[]},e.data.cols.push({id:"Time",label:"Time",type:"string",p:{}}),e.data.cols.push({id:"t0",label:"RIMS",type:"number",p:{}}),e.data.cols.push({id:"t1",label:"Mash",type:"number",p:{}}),e.data.cols.push({id:"t2",label:"Kettle",type:"number",p:{}}),e.data.cols.push({id:"t3",label:"HLT / Kettle2",type:"number"}),e.data.rows.push(t("10:30",115,100,106,200)),e.data.rows.push(t("10:31",117,110,106,208)),e.data.rows.push(t("10:32",118,120,106,210)),e.data.rows.push(t("10:33",115,130,106,205)),e.data.rows.push(t("10:34",120,145,105,205)),e.data.rows.push(t("10:35",123,150,104,204)),e.data.rows.push(t("10:36",123,155,103,199)),e.data.rows.push(t("10:37",125,156,106,201)),e.data.rows.push(t("10:38",125,158,105,203)),e.data.rows.push(t("10:39",126,159,106,206)),e.data.rows.push(t("10:40",128,160,105,206)),e.data.rows.push(t("10:41",128,160,106,208)),e.options={title:"Temperatures",titleTextStyle:{color:"#D3D3D4"},isStacked:"false",fill:20,curveType:"function",trendlines:{0:{type:"linear",color:"green",lineWidth:3,opacity:.3,showR2:!0,visibleInLegend:!0},1:{type:"linear",color:"green",lineWidth:"3",opacity:"0.3",showR2:"true",visibleInLegend:"true"}},displayExactValues:!0,vAxis:{title:"Temperature unit",gridlines:{count:6,color:"#D3D3D4"},titleTextStyle:{color:"#D3D3D4"},textStyle:{color:"#D3D3D4"}},hAxis:{title:"Date",gridlines:{color:"#D3D3D4"},titleTextStyle:{color:"#D3D3D4"},textStyle:{color:"#D3D3D4"}},legend:{textStyle:{color:"#D3D3D4"}},backgroundColor:"#353E42",colors:["#67DC2D","#19fcfc","#FC1919","#FC8B19"]},e.formatters={},angular.module("app").value("chartData",e)}(),function(){function t(t,e){function r(t,e,r){u=r,m.curPnlAlarm.temperature=t,m.curPnlAlarm.whichAlarm=e,m.curPnlAlarm.whichAlarmDis=e.replace("Alarm","").replace(/\w\S*/g,function(t){return t.charAt(0).toUpperCase()+t.substr(1).toLowerCase()})}function i(t){return angular.isObject(t)&&angular.isDefined(t.isRims)&&1===t.isRims}function n(){m.rimsSettingVisible=m.rimsSettingVisible===!0?!1:!0}function o(t){return t.id===u}function a(e){angular.isNumber(m.curPnlAlarm.temperature)&&(angular.isDefined(e[m.curPnlAlarm.whichAlarm])&&(e[m.curPnlAlarm.whichAlarm]=m.curPnlAlarm.temperature,"highAlarm"===m.curPnlAlarm.whichAlarm?t.setHighAlarms(e.id,m.curPnlAlarm.temperature):"lowAlarm"===m.curPnlAlarm.whichAlarm&&t.setLowAlarms(e.id,m.curPnlAlarm.temperature)),u=-1)}function s(){u=-1}function l(){m.rimsSettingVisible=!1,t.setPidSetPoint(m.rimsSetPoint),t.setPidWindowSize(m.rimsWindowSize),t.setPidKp(m.rimsKp),t.setPidKi(m.rimsKi),t.setPidKd(m.rimsKd)}function d(){m.rimsSettingVisible=!1}function c(t){var r={id:t.id};e.go("dashboard",r)}var m=this;m.rimsSetPoint=2e3,m.rimsWindowSize=5e3,m.rimsKp=5,m.rimsKi=.5,m.rimsKd=1,m.openAlarmPanel=r,m.showRimsButton=i,m.showRimsSettings=n,m.rimsSettingVisible=!1,m.showPnlAlarm=o,m.curPnlAlarm={},m.btnUpdateAlarmsClick=a,m.btnCancelAlarmsClick=s,m.btnUpdateRimsClick=l,m.btnUpdateRimsCancelClick=d,m.openThermoDashboard=c;var u=-1}angular.module("app").controller("brewingThermometer",t),t.$inject=["brewduinoCmdsSrv","$state"]}(),function(){function t(t,e){function r(e){return t.sendCmd(f.clearTempAlarms,e).error(function(){w("clearAlarms","")})}function i(e){return t.getStatus(e)}function n(){return t.sendCmd(f.resetAlarm,1)}function o(e){return t.sendCmd(f.turnOnAux,e?1:0)}function a(e,r){return t.sendCmd(f.setTempAlarmHigh,e+","+r)}function s(e,r){return t.sendCmd(f.setTempAlarmLow,e+","+r)}function l(e){return t.sendCmd(f.setPIDSetPoint,e)}function d(e){return t.sendCmd(f.setPIDWindowSize,e)}function c(e){return t.sendCmd(f.setPIDKp,e)}function m(e){return t.sendCmd(f.setPIDKi,e)}function u(e){return t.sendCmd(f.setPIDKd,e)}function h(e){return t.sendCmd(f.turnOnPump,e?1:0)}function g(e){return t.sendCmd(f.turnOnRims,e?1:0)}function p(e){return t.sendCmd(f.setTimer,e)}function b(){return t.sendCmd(f.startLogging,1)}function v(){return t.sendCmd(f.stopLogging,1)}function w(t,r){e.error("XHR Failed for send command:"+t+" "+r)}var f={returnUnknownCmd:0,returnStatus:1,setTempAlarmHigh:2,setTempAlarmLow:3,clearTempAlarms:4,setTimer:5,resetAlarm:6,startLogging:7,stopLogging:8,setPIDSetPoint:9,setPIDWindowSize:10,setPIDKp:11,setPIDKi:12,setPIDKd:13,turnOnRims:14,turnOnPump:15,turnOnAux:16,setInitialClock:17};return{cmds:f,clearAlarms:r,getStatus:i,resetAlarm:n,startLogging:b,stopLogging:v,setAuxPower:o,setHighAlarms:a,setLowAlarms:s,setPidSetPoint:l,setPidWindowSize:d,setPidKp:c,setPidKi:m,setPidKd:u,setPumpsPower:h,setRimsPower:g,setTimer:p}}angular.module("app").factory("brewduinoCmdsSrv",t),t.$inject=["brewduionoDataSrv","logger"]}(),function(){function t(t,e,r,i,n,o){function a(){h.mcData=e.currentStatus,d().then(function(){h.showStatusLog=n.showStatusLog,i.info("Now viewing Classic theme")}),e.setAutoUpdates(!0),t.$watch(e.getCurrentStatus,function(t){u(t),i.success("Updated status",t)})}function s(){if(r.resetAlarm(),1==h.alarm.tempA){var t=h.mcData.thermometers[h.alarm.whichTemp];t.highAlarm<t.temp?r.setHighAlarms(h.alarm.whichTemp,255):r.setLowAlarms(h.alarm.whichTemp,32)}else o.clearExpired()}function l(t){r.setAuxPower(t)}function d(){return r.getStatus(h.mcData).then(function(t){return h.mcData=t.data,i.info("Resolved Data",h.mcData),t})}function c(t){r.setPumpsPower(t)}function m(t){r.setRimsPower(t)}function u(t){h.mcData=t,h.alarmBtn=1===t.tempAlarmActive||1===t.timerAlarmActive?!0:!1,h.mcData.auxOn=1===t.auxOn?!0:!1,h.mcData.rimsEnable=1===t.rimsEnable?!0:!1,h.mcData.pumpOn=1===t.pumpOn?!0:!1,h.lastTempUpdate=new Date,h.alarm={tempA:t.tempAlarmActive,timeA:t.timerAlarmActive,whichTemp:t.whichThermoAlarm}}var h=this;h.mcData={},h.alarmClick=s,h.auxClick=l,h.pumpClick=c,h.predicate="order",h.rimsClick=m,a()}angular.module("app").controller("brewduinoCtrl",t),t.$inject=["$scope","brewduionoDataSrv","brewduinoCmdsSrv","logger","settingsSrv","countDownTimerSrv"]}(),function(){function t(t,e,r,i){function n(){i(function(){h===!0&&a()},15e3)}function o(){return u}function a(){var e="/getStatus";return t.get(e).success(function(t){t.thermometers.forEach(function(t,e){t.name=r.thermos[e].name,t.order=r.thermos[e].order}),u=t}).error(l)}function s(){var e="/clearSessionData";return t.get(e).error(c)}function l(){e.error("XHR Failed for getStatus.")}function d(e,r){var i="/sendCommand/"+e+"/"+r;return t.get(i).error(c)}function c(t){e.error("XHR Failed for sendCommand."+t)}function m(t){h=t}var u={},h=!1;return n(),{clearSessionData:s,getCurrentStatus:o,getStatus:a,sendCmd:d,setAutoUpdates:m}}angular.module("app").factory("brewduionoDataSrv",t),t.$inject=["$http","logger","settingsSrv","$interval"]}(),function(){function t(t,e,r){function i(){m=new Date}function n(){c.showAddTimerPanel=!0}function o(t,i){c.showAddTimerPanel=!1;var n=new Date;n.setSeconds(n.getSeconds()+60*t);var o={id:u,timer:n,label:i,isActive:!0};u++,r.addTimer(o),m=new Date,e.setTimer(t)}function a(){c.showAddTimerPanel=!1}function s(e){e.isActive=!1,t.$apply()}function l(){c.timers.filter(function(t){return t.isActive})}function d(t){return 0>t-m?1:(t-m)/1e3}var c=this,m=new Date;c.timers=r.getTimers(),c.showAddTimerPanel=!1,c.addTimer=n,c.startNewTimer=o,c.cancelNewTimer=a,c.getTimer=d,c.timerExpired=s,c.removeExpiredTimers=l;var u=0;i()}angular.module("app").controller("countDownTimer",t),t.$inject=["$scope","brewduinoCmdsSrv","countDownTimerSrv"]}(),function(){function t(){function t(t){i.push(t)}function e(){for(var t=(new Date,i.length-1);t>=0;t--){var e=Date.parse(i[t].timer);(isNaN(e)||e<Date.now())&&i.splice(t,1)}}function r(){return i}var i=[];return{addTimer:t,clearExpired:e,getTimers:r}}angular.module("app").factory("countDownTimerSrv",t)}(),function(){function t(t,e,r,i){function n(n,o){var a=new Date;a.setSeconds(a.getSeconds()+60*n);var s=r.getTimers().length+1,l={id:s,timer:a,label:o,isActive:!0};s++,r.addTimer(l),e.setTimer(n),i.success("Added Timer "+n+" Minutes",n);var d={id:t.params.id};t.go("dashboard",d)}function o(){var e={id:t.params.id};t.go("dashboard",e)}var a=this;a.addTimer=n,a.cancelAddTimer=o}angular.module("app").controller("countDownTimerFormCtrl",t),t.$inject=["$state","brewduinoCmdsSrv","countDownTimerSrv","logger"]}(),function(){function t(t,e,r,i){function n(){h=o(),h.data.rows=a(),e(function(){g===!0&&a()},6e4)}function o(){var t={};return t.type="AreaChart",t.cssStyle="height:400px; width:100%; float:left;",t.data={cols:[],rows:[]},t.data.cols.push({id:"Time",label:"Time",type:"datetime",p:{}}),t.data.cols.push({id:"t0",label:i.thermos[0].name,type:"number",p:{}}),t.data.cols.push({id:"t1",label:i.thermos[1].name,type:"number",p:{}}),t.data.cols.push({id:"t2",label:i.thermos[2].name,type:"number",p:{}}),t.data.cols.push({id:"t3",label:i.thermos[3].name,type:"number"}),t.options={title:"Temperatures",titleTextStyle:{color:"#D3D3D4"},isStacked:"false",fill:20,curveType:"function",displayExactValues:!0,vAxis:{title:"Temperature unit",gridlines:{count:6,color:"#D3D3D4"},titleTextStyle:{color:"#D3D3D4"},textStyle:{color:"#D3D3D4"}},hAxis:{title:"Date",gridlines:{color:"#D3D3D4"},titleTextStyle:{color:"#D3D3D4"},textStyle:{color:"#D3D3D4"}},legend:{textStyle:{color:"#D3D3D4"}},backgroundColor:"#353E42",colors:["#67DC2D","#19fcfc","#FC1919","#FC8B19"]},t.formatters={},t}function a(){var e="/getChartData",i=new r.defer;return t.get(e).success(function(t){var e=[];t.forEach(function(t){var r=new Date(t.year,t.month,t.day,t.hour,t.minute,t.second,0);e.push(m(r,t.temp0,t.temp1,t.temp2,t.temp3))}),h.data.rows=e,i.resolve(t)}),i.promise}function s(){return h.data.rows}function l(){return h}function d(t,e){var r=c(t),i=Number(t),n=h.data.rows[h.data.rows.length-1],o=n.c[i+1].v,a=Number(e)-o;return a/r}function c(t){if(h.data.rows.length>=2){var e=Number(t),r=h.data.rows[h.data.rows.length-1],i=h.data.rows[h.data.rows.length-2],n=r.c[e+1].v-i.c[e+1].v,o=(new Date(r.c[0].v)-new Date(i.c[0].v))/6e4;return Number(n)/Number(o)}return 0}function m(t,e,r,i,n){return{c:[{v:t},{v:e},{v:r},{v:i},{v:n}]}}function u(t){g=t}var h={},g=!1;return n(),{getChartConfig:o,getChartData:a,getCurrentData:s,getCurrentChart:l,getEtaToAlarm:d,getTempSpeed:c,setAutoUpdates:u}}angular.module("app").factory("chartSrv",t),t.$inject=["$http","$interval","$q","settingsSrv"]}(),function(){function t(t,e,r,i,n,o,a,s){function l(){R.chartOtherThermos=S(),o.thermos.forEach(function(t){t.chartEnabled=!1}),o.thermos[Number(t.params.id)].chartEnabled=!0,F(i.getCurrentStatus()),w(),v(),i.setAutoUpdates(!0),a.setAutoUpdates(!0),e.$watch(i.getCurrentStatus,function(t){F(t),n.success("Updated status",t)}),e.$watch(a.getCurrentData,function(e){if(R.hasOwnProperty("chart")&&R.chart.hasOwnProperty("data")){{a.getCurrentData()}R.chart.data.rows=a.getCurrentData(),R.lastChartUpdate=new Date,R.tempSpeed=a.getTempSpeed(t.params.id),R.etaAlarm=a.getEtaToAlarm(t.params.id,R.thermo.highAlarm,R.thermo.lowAlarm),n.success("Updated chart",e)}})}function d(){var e={id:t.params.id};t.go("cdtAdd",e)}function c(){R.auxOn=!R.auxOn,r.setAuxPower(R.auxOn)}function m(t){R.chart.type=t}function u(){R.chart.view={columns:T()}}function h(t){R[t]=R.thermo[t],R.showAlarmForm[t]=!0}function g(){R.showMenu=!1}function p(){var e={id:t.params.id};t.go("dbSettings",e)}function b(t,e,i){R.showAlarmForm[t]=!1,R.thermo[t]=i,"highAlarm"===t?r.setHighAlarms(e,i):r.setLowAlarms(e,i)}function v(){O===!1&&(O=!0,a.getChartData().then(function(t){R.hasOwnProperty("chart")&&R.chart.hasOwnProperty("data")&&(R.chart.data.rows=t)}))}function w(){return r.getStatus().then(function(t){return F(t.data),R.chart=a.getChartConfig(),R.chart.view={columns:T()},v(),n.success("Updated status",t.data),t},function(t){n.error("Unsuccessful with getting status",t)})}function f(){R.showMenu=!0}function T(){var e=[0];return o.thermos.forEach(function(r,i){(r.chartEnabled||i===Number(t.params.id))&&e.push(i+1)}),e}function C(){var e=[],r=i.getCurrentStatus();return r.hasOwnProperty("thermometers")&&r.thermometers.forEach(function(r,i){i!==Number(t.params.id)&&e.push(r)}),e}function S(){var e=[];return o.thermos.forEach(function(r,i){i!==Number(t.params.id)&&e.push(r)}),e}function A(){R.pumpOn=!R.pumpOn,r.setPumpsPower(R.pumpOn)}function D(){R.rimsEnable=!R.rimsEnable,r.setRimsPower(R.rimsEnable)}function x(){var e={id:t.params.id};t.go("rimsSettings",e)}function y(){if(R.alarmBtn=!1,r.resetAlarm(),1==R.alarm.tempA){var t=R.thermometers[R.alarm.whichTemp];t.highAlarm<t.temp?r.setHighAlarms(R.alarm.whichTemp,255):r.setLowAlarms(R.alarm.whichTemp,32)}else s.clearExpired()}function k(){var e={id:t.params.id};t.go("settings",e)}function P(e){var r={id:e.id};t.go("dashboard",r)}function L(t){R[t]=R.thermo[t],R.showAlarmForm[t]=!R.showAlarmForm[t]}function F(e){if(R.rimsEnable=e.rimsEnable,R.pumpOn=e.pumpOn,R.auxOn=e.auxOn,R.thermometers=e.thermometers,R.otherThermos=C(),E===!1){if(!(e.hasOwnProperty("thermometers")&&e.hasOwnProperty("tempAlarmActive")&&e.hasOwnProperty("timerAlarmActive")&&e.hasOwnProperty("whichThermoAlarm")))return;E=!0}N===!1&&(e.thermometers.forEach(function(e,r){e.chartEnabled=r===Number(t.params.id)?!0:!1}),N=!0),R.thermometersList=[e.thermometers[t.params.id]],R.thermo=e.thermometers[t.params.id],R.lastTempUpdate=new Date,(1===e.tempAlarmActive||1===e.timerAlarmActive)&&(R.alarmBtn=!0),R.alarm={tempA:e.tempAlarmActive,timeA:e.timerAlarmActive,whichTemp:e.whichThermoAlarm}}var R=this,N=!1,O=!1,E=!1;R.addTimer=d,R.alarm={},R.alarmBtn=!1,R.auxClick=c,R.chartTypeArea=!0,R.chartTypeLine=!1,R.changeChartType=m,R.chBxChartChanged=u,R.clickAlarm=h,R.closeMenu=g,R.dbSettingsClick=p,R.exitAlarm=b,R.lastChartUpdate=new Date,R.lastTempUpdate=new Date,R.openMenu=f,R.pumpClick=A,R.rimsClick=D,R.rimsSettingsClick=x,R.setAlarm=y,R.settingsClick=k,R.showAlarmForm={highAlarm:!1,lowAlarm:!1},R.showMenu=!1,R.showStatusLog=o.showStatusLog,R.otherThermos=[],R.switchTemps=P,R.thermometers=[],R.toggleAlarm=L,R.tempSpeed=0,R.etaAlarm=0,R.highAlarm="",R.lowAlarm="",l()}angular.module("app").controller("dashboardCtrl",t),t.$inject=["$state","$scope","brewduinoCmdsSrv","brewduionoDataSrv","logger","settingsSrv","chartSrv","countDownTimerSrv"]}(),function(){function t(t,e,r,i,n){function o(){m.enableDataLogging=i.dataLoggingEnabled,m.createNewSession=!1,m.newSessionName=""}function a(){m.createNewSession=!1,m.newSessionName=""}function s(){e.clearSessionData().success(function(){n.warning("You just cleared your database")})}function l(t){i.dataLoggingEnabled=t,1===t||t===!0?r.startLogging():r.stopLogging()}function d(){var e={id:t.params.id};t.go("dashboard",e)}function c(t){i.createNewSession(t).then(function(){n.success("Just created new session:"+t)})}var m=this;m.cancel=a,m.clearSessionData=s,m.dataLogClick=l,m.done=d,m.submit=c,o()}angular.module("app").controller("dbSettingsCtrl",t),t.$inject=["$state","brewduionoDataSrv","brewduinoCmdsSrv","dbSettingsSrv","logger"]}(),function(){function t(t,e){function r(r){var i="/createNewSession",n=new e.defer;return t.post(i,{sessionName:r}).success(function(t){n.resolve(t)}).error(function(t){n.reject(t)}),n.promise}var i=!1;return{createNewSession:r,dataLoggingEnabled:i}}angular.module("app").factory("dbSettingsSrv",t),t.$inject=["$http","$q"]}(),function(){"use strict";angular.module("app.logger",[])}(),function(){function t(t,e,r){function i(i,n,o){r.showToast.error===!0&&e.error(i,o),t.error("Error: "+i,n)}function n(i,n,o){r.showToast.info===!0&&e.info(i,o),t.info("Info: "+i,n)}function o(i,n,o){r.showToast.success===!0&&e.success(i,o),t.info("Success: "+i,n)}function a(i,n,o){r.showToast.warning===!0&&e.warning(i,o),t.warn("Warning: "+i,n)}var s={showToasts:!0,error:i,info:n,success:o,warning:a,log:t.log};return s}angular.module("app.logger").factory("logger",t),t.$inject=["$log","toaster","settingsSrv"]}(),function(){function t(t,e,r){function i(){s.settings=e.getCurrentStatus()}function n(){var e={id:t.params.id};t.go("dashboard",e)}function o(e){a(e);var r={id:t.params.id};t.go("dashboard",r)}function a(t){r.setPidSetPoint(t.setPoint),r.setPidWindowSize(t.windowSize),r.setPidKp(t.kp),r.setPidKi(t.ki),r.setPidKd(t.kd)}var s=this;s.settings={},s.cancel=n,s.submit=o,i()}angular.module("app").controller("rimsSettingsCtrl",t),t.$inject=["$state","brewduionoDataSrv","brewduinoCmdsSrv"]}(),function(){function t(t,e,r,i){function n(){h.settings={showStatusLog:e.showStatusLog,showToast:e.showToast,thermos:e.thermos},h.settings.thermos.forEach(function(){h.showThermoName.push(!1),h.showThermoOrder.push(!1)})}function o(){var e={id:t.params.id};t.go("dashboard",e)}function a(){r.clearSessionData().success(function(){i.warning("You just cleared your database")})}function s(t){h.showThermoName[t.id]=!0}function l(t){h.showThermoOrder[t.id]=!0}function d(t){h.showThermoName[t.id]=!1}function c(t){h.showThermoOrder[t.id]=!1}function m(e){u(e);var r={id:t.params.id};t.go("dashboard",r)}function u(t){e.showStatusLog=t.showStatusLog,e.showToast=t.showToast}var h=this;h.settings={},h.showThermoName=[],h.showThermoOrder=[],h.cancel=o,h.clearSessionData=a,h.clickThermoName=s,h.clickThermoOrder=l,h.exitThermoName=d,h.exitThermoOrder=c,h.submit=m,n()}angular.module("app").controller("settingsFormCtrl",t),t.$inject=["$state","settingsSrv","brewduionoDataSrv","logger"]}(),function(){var t={};angular.module("app").value("settingsSrv",t),t.showStatusLog=!1,t.showToast={error:!0,info:!0,success:!0,warning:!0},t.thermos=[{name:"Mash",order:0,chartEnabled:!1,id:0},{name:"Kettle",order:1,chartEnabled:!1,id:1},{name:"HLT / Kettle2",order:2,chartEnabled:!1,id:2},{name:"RIMS",order:3,chartEnabled:!1,id:3}]}(),function(){function t(t){var e=this;e.statusInfo=t.getCurrentStatus()}angular.module("app").controller("statusLogCtrl",t),t.$inject=["brewduionoDataSrv"]}(),angular.module("app").run(["$templateCache",function(t){t.put("App/brewduino/brewduino.html",'<link href=Fonts/fontello-374a6348/css/misc.css rel=stylesheet type=text/css><style>\r\n    body\r\n    {\r\n        background-color: white;\r\n    }\r\n</style><div id=pnlMain ng-controller="brewduinoCtrl as brewduino"><div id=RimsPanelMain><div id=RimsThermometers><div class=RimsThermometer ng-include="\'App/brewingThermometer/brewingThermometer.html\'" ng-repeat="thermometers in brewduino.mcData.thermometers| orderBy:brewduino.predicate"></div><div class=CountDownTimer><div ng-include="\'App/countDownTimer/countDownTimerClassic.html\'"></div></div></div><div id=buttonRow><div class=SwitchWrapper><div class=switch id=switchReset><input type=checkbox ng-model=brewduino.alarmBtn ng-click=brewduino.alarmClick(brewduino.alarmBtn)> <label><i class=icon-attention-alt></i>Alarm</label></div></div><div class=SwitchWrapper><div class=switch id=switchRimsOn><input type=checkbox ng-model=brewduino.mcData.rimsEnable ng-click=brewduino.rimsClick(brewduino.mcData.rimsEnable)> <label><i class=icon-fire-1></i>RIMS</label></div></div><div class=SwitchWrapper><div class=switch id=switchPumpOn><input type=checkbox ng-model=brewduino.mcData.pumpOn ng-click=brewduino.pumpClick(brewduino.mcData.pumpOn)> <label><i class=icon-off></i>Pump</label></div></div><div class=SwitchWrapper><div class=switch id=switchAuxPower><input type=checkbox ng-model=brewduino.mcData.auxOn ng-click=brewduino.auxClick(brewduino.mcData.auxOn)> <label><i class=icon-off></i>Aux</label></div></div><span class=Stretch></span></div></div><br><div class=text-right style="width:100%; padding: 15px;"><div class="text-color1 h6">Last temperature update: {{brewduino.lastTempUpdate | date:\'mediumTime\'}}</div></div><div ng-if=brewingThermoItem.showStatusLog ng-include="\'App/statusLog/statusLog.html\'"></div></div>'),t.put("App/brewingThermometer/brewingThermometer.html",'<div id=BrewingThermometerMain ng-controller="brewingThermometer as brewingThermometer"><span id=lblTitle class=BrewingThermometer_Title>{{thermometers.name}}</span><br><div id=BrewingThermometer_Display><div id=lblCurrentTemp class=TemperatureDigital ng-click=brewingThermometer.openThermoDashboard(thermometers)>{{thermometers.temp | number:1}}</div><div id=btnTempHighAlarm class=TemperatureDigitalSmallTop ng-click="brewingThermometer.openAlarmPanel(thermometers.highAlarm,\'highAlarm\', thermometers.id)">{{thermometers.highAlarm | number:1}}</div><div id=btnTempLowAlarm class=TemperatureDigitalSmallBottom ng-click="brewingThermometer.openAlarmPanel(thermometers.lowAlarm,\'lowAlarm\', thermometers.id)">{{thermometers.lowAlarm | number:1}}</div><div id=pnlRimsButton ng-if=brewingThermometer.showRimsButton(thermometers)><span ng-click=brewingThermometer.showRimsSettings() class=Clickable><i class=icon-beer></i>RIMS Settings</span><form name=rimsForm class=form-horizontal><table ng-show=brewingThermometer.rimsSettingVisible class=pnlRimsControls style="border-collapse: separate; border-spacing: 5px;"><tr><td class=RimsSettingLabel>Set Point:</td><td class=RimsSettingTB><input type=number id=tbSetPoint ng-model=brewingThermometer.rimsSetPoint></td></tr><tr><td class=RimsSettingLabel>WindowSize:</td><td class=RimsSettingTB><input type=number id=tbWindowSize ng-model=brewingThermometer.rimsWindowSize></td></tr><tr><td class=RimsSettingLabel>Kp:</td><td class=RimsSettingTB><input type=number id=tbKp ng-model=brewingThermometer.rimsKp></td></tr><tr><td class=RimsSettingLabel>Ki:</td><td class=RimsSettingTB><input type=number id=tbKi ng-model=brewingThermometer.rimsKi></td></tr><tr><td class=RimsSettingLabel>Kd:</td><td class=RimsSettingTB><input type=number id=tbKd ng-model=brewingThermometer.rimsKd></td></tr><tr><td colspan=2><span class=error ng-show=rimsForm.tbSetPoint.$error.number>ERROR!</span></td></tr><tr><td></td><td class=RimsSettingTB><button id=btnUpdateRims ng-click=brewingThermometer.btnUpdateRimsClick() class=btnUpdateRims>Submit</button> <button id=btnUpdateRimsCancel ng-click=brewingThermometer.btnUpdateRimsCancelClick() class=btnUpdateRims>Cancel</button></td></tr></table></form></div><div id=pnlSetAlarm class=PanelOverlay ng-show=brewingThermometer.showPnlAlarm(thermometers)><form name=alarmForm class=form-horizontal><legend style="color: black">{{brewingThermometer.curPnlAlarm.whichAlarmDis}} Alarm</legend><div class=form-group><div class=col-xs-12><input type=number id=tbAlarm name=tbAlarm class=form-control min=-67 max=257 placeholder="{{brewingThermometer.curPnlAlarm.temperature | number:1}}" ng-model=brewingThermometer.curPnlAlarm.temperature></div></div><div class=form-group><div class=col-xs-12><button id=btnCancelAlarms class="btn btn-default" ng-click=brewingThermometer.btnCancelAlarmsClick()>Cancel</button> <button id=btnUpdateAlarms class="btn btn-info" ng-click=brewingThermometer.btnUpdateAlarmsClick(thermometers)>Update</button></div></div></form></div></div></div>'),t.put("App/countDownTimer/countDownTimer.html",'<div id=countDownTimer ng-controller="countDownTimer as countDownTimer"><div style="width: 210px"></div><div id=divCountdown ng-repeat="timer in countDownTimer.timers"><span ng-class="{true: \'clock\',false: \'clockExpired\'}[timer.isActive]"><timer countdown=countDownTimer.getTimer(timer.timer) interval=1000 finish-callback=countDownTimer.timerExpired(timer)>{{hhours}}:{{mminutes}}:{{sseconds}}</timer>{{timer.label}}</span></div><div id=pnlAddTimer ng-show=countDownTimer.showAddTimerPanel><table><tr><td></td><td style="text-align: right;"><span id=dvCancelTimer class=cancelX ng-click=countDownTimer.cancelNewTimer()>X</span></td></tr><tr><td style="text-align: right; width: 20%;">Minutes:</td><td style="text-align: left;"><input type=number id=tbNewTime name=tbNewTime ng-model=newTimer></td></tr><tr><td style="text-align: right;">Title:</td><td style="text-align: left;"><input type=text id=tbTimerLabel name=tbTimerLabel ng-model=newTimerLabel></td></tr><tr><td></td><td style="text-align: right;"><button type=button id=btnAddNewTimer ng-click="countDownTimer.startNewTimer(newTimer, newTimerLabel)">Start</button></td></tr></table></div></div>'),t.put("App/countDownTimer/countDownTimerClassic.html",'<div id=countDownTimer ng-controller="countDownTimer as countDownTimer"><div id=btnShowNewTimerPanel class=Clickable ng-click=countDownTimer.addTimer()>Click for New Timer</div><div style="width: 210px"></div><div id=divCountdown ng-repeat="timer in countDownTimer.timers"><span ng-class="{true: \'clock\',false: \'clockExpired\'}[timer.isActive]"><timer countdown=countDownTimer.getTimer(timer.timer) interval=1000 finish-callback=countDownTimer.timerExpired(timer)>{{hhours}}:{{mminutes}}:{{sseconds}}</timer>{{timer.label}}</span></div><div id=pnlAddTimer ng-show=countDownTimer.showAddTimerPanel><form name=addTimer class=form-horizontal><div class=form-group><label for=minutes class="col-xs-12 control-label" style=text-align:left>Minutes</label><div class=col-xs-12><input type=number min=0.2 class=form-control id=minutes placeholder=Minutes ng-model=countDownTimer.minutes></div></div><div class=form-group><label for=timerTitle class="control-label col-xs-12" style=text-align:left>Title</label><div class=col-xs-12><input type=text class=form-control id=timerTitle placeholder=Title ng-model=countDownTimer.title></div></div><div class=form-group><div class=col-xs-12><button type=button class="btn btn-default" ng-click=countDownTimer.cancelNewTimer()>Cancel</button> <button type=button class="btn btn-info" ng-click="countDownTimer.startNewTimer(countDownTimer.minutes, countDownTimer.title)">Start</button></div></div></form></div></div>'),t.put("App/countDownTimerForm/countDownTimerForm.html",'<div ng-controller="countDownTimerFormCtrl as cdtFormCtrl"><div class=container-fluid><form name=addTimerForm class=form-horizontal><legend>Add Count Down Timer</legend><div class=form-group><label for=minutes class="col-md-2 control-label">Minutes</label><div class=col-md-10><input type=number min=0.5 class=form-control id=minutes placeholder=Minutes ng-model=cdtFormCtrl.minutes></div></div><div class=form-group><label for=timerTitle class="col-md-2 control-label">Title</label><div class=col-md-10><input type=text class=form-control id=timerTitle placeholder=Title ng-model=cdtFormCtrl.title></div></div><div class=form-group><div class="col-md-10 col-md-offset-2"><button type=button class="btn btn-default" ng-click=cdtFormCtrl.cancelAddTimer()>Cancel</button> <button type=button class="btn btn-info" ng-click="cdtFormCtrl.addTimer(cdtFormCtrl.minutes, cdtFormCtrl.title)">Start</button></div></div></form></div></div>'),t.put("App/dashboard/dashboard.html",'<div id=dashBoardMain ng-controller="dashboardCtrl as dboardCtrl" class=container-fluid ng-animate=""><div class="dashboard-slide-menu panel panel-default fxFade" ng-show=dboardCtrl.showMenu style="margin-left: -15px"><ul><li><label class=dashboardButton><i class=icon-level-up ng-click=dboardCtrl.closeMenu()></i></label></li><li><label ng-click=dboardCtrl.setAlarm() style=cursor:pointer ng-class="{\'alarmBtn-dashboard\': dboardCtrl.alarmBtn === true }"><i class=icon-attention-alt></i>Alarm</label></li><li><label ng-click=dboardCtrl.addTimer() style=cursor:pointer><i class=icon-clock style="color: white"></i><br>Timer</label></li><li><label ng-click="dboardCtrl.rimsClick() style=" cursor:pointer"="" ng-class="{\'rimsBtn-dashboard\': dboardCtrl.rimsEnable == 1 }"><i class=icon-fire-1></i>RIMS</label></li><li><label ng-click=dboardCtrl.pumpClick() style=cursor:pointer ng-class="{\'pumpBtn-dashboard\': dboardCtrl.pumpOn == 1 }"><i class=icon-off></i>Pump</label></li><li><label ng-click=dboardCtrl.auxClick() style=cursor:pointer ng-class="{\'auxBtn-dashboard\': dboardCtrl.auxOn == 1 }"><i class=icon-off></i>Aux</label></li><li><label ng-click=dboardCtrl.rimsSettingsClick() class=dashboardButton><i class=icon-sliders></i>RIMs-Settings</label></li><li><label ng-click=dboardCtrl.dbSettingsClick() class=dashboardButton><i class=icon-database></i>Database</label></li><li><label ng-click=dboardCtrl.settingsClick() class=dashboardButton><i class=icon-cog-alt></i>Settings</label></li></ul></div><div class=row><div class=col-xs-12><i class=icon-menu ng-click=dboardCtrl.openMenu()></i></div></div><div id=dashBoardHeader class="dashBoardHeader clearfix"><div class=row><div class="col-sm-3 col-xs-6"><div class=CountDownTimer2 ng-include="\'App/countDownTimer/countDownTimer.html\'"></div></div><div class="col-sm-3 col-xs-6" ng-repeat="otherThermo in dboardCtrl.otherThermos | orderBy:\'order\'" ng-click=dboardCtrl.switchTemps(otherThermo)><span class="dashboard-minor-title text-color5">{{otherThermo.name}}</span> <span class="dashboard-minor-temp text-color5">{{otherThermo.temp | number:1}}</span></div></div></div><div class=row><div class=col-md-3><div class=row><div class="col-xs-6 h1 text-color1">{{dboardCtrl.thermo.name}}</div><div class="col-xs-6 h1 text-color1">{{dboardCtrl.thermo.temp | number:1}}</div></div><div class=row><div class="col-xs-2 h5 text-color4" ng-click="dboardCtrl.toggleAlarm(\'highAlarm\')">High:</div><div class="col-xs-4 h5 text-color4" ng-click="dboardCtrl.clickAlarm(\'highAlarm\')" ng-hide="dboardCtrl.showAlarmForm[\'highAlarm\']">{{dboardCtrl.thermo.highAlarm | number:1}}</div><div class="col-xs-4 h5 text-color4" ng-show="dboardCtrl.showAlarmForm[\'highAlarm\']"><input type=number min=0 class="form-control input-sm" id=highAlarm ng-model=dboardCtrl.highAlarm ng-blur="dboardCtrl.exitAlarm(\'highAlarm\', dboardCtrl.thermo.id, dboardCtrl.highAlarm)"></div><div class="col-xs-2 h5 text-color4" ng-click="dboardCtrl.toggleAlarm(\'lowAlarm\')">Low:</div><div class="col-xs-4 h5 text-color4" ng-click="dboardCtrl.clickAlarm(\'lowAlarm\')" ng-hide="dboardCtrl.showAlarmForm[\'lowAlarm\']">{{dboardCtrl.thermo.lowAlarm | number:1}}</div><div class="col-xs-4 h5 text-color4" ng-show="dboardCtrl.showAlarmForm[\'lowAlarm\']"><input type=number min=0 class="form-control input-sm" id=lowAlarm ng-model=dboardCtrl.lowAlarm ng-blur="dboardCtrl.exitAlarm(\'lowAlarm\', dboardCtrl.thermo.id, dboardCtrl.lowAlarm)"></div><div class="col-xs-2 h5 text-color1">Temp. Velocity</div><div class="col-xs-4 h5 text-color1">{{dboardCtrl.tempSpeed | number:1}} F/min</div><div class="col-xs-2 h5 text-color1">ETA to Alarm:</div><div class="col-xs-4 h5 text-color1">{{dboardCtrl.etaAlarm | number:1}} minutes</div></div></div><div class=col-md-9><div class=row><div class=col-sm-10><div google-chart="" chart=dboardCtrl.chart style={{dboardCtrl.chart.cssStyle}}></div>&nbsp;</div><div class=col-sm-2><div class="panel panel-default"><div class=panel-heading>Chart Key</div><div class=panel-body><div ng-repeat="thermo in dboardCtrl.chartOtherThermos"><input type=checkbox name=chBxChart{{thermo.id}} ng-model=thermo.chartEnabled ng-click=dboardCtrl.chBxChartChanged(thermo)>{{thermo.name}}</div><br><br><h4>Chart Type:</h4><input type=radio name=chartRadio ng-model=dboardCtrl.chart.type value=AreaChart>Area<br><input type=radio name=chartRadio ng-model=dboardCtrl.chart.type value=LineChart>Line</div></div></div></div></div></div><div class=col-sm-6><a ui-sref=classic class=text-color2>classic theme</a></div><div class="col-sm-6 text-right"><div class="text-color1 h6">Last temperature update: {{dboardCtrl.lastTempUpdate | date:\'mediumTime\'}}</div><div class="text-color1 h6">Last chart update: {{dboardCtrl.lastChartUpdate | date:\'mediumTime\'}}</div></div><div ng-if=dboardCtrl.showStatusLog ng-include="\'App/statusLog/statusLog.html\'"></div></div>'),t.put("App/dbSettings/dbSettingsForm.html",'<div ng-controller="dbSettingsCtrl as dbSettingsCtrl" class=container><form name=dbSettings class=form-horizontal><legend>Database Settings</legend><div class=form-group ng-hide=dbSettingsCtrl.createNewSession><div class="col-md-10 col-md-offset-2"><div class=checkbox><label><input type=checkbox ng-model=dbSettingsCtrl.createNewSession> Create New Session</label></div></div></div><div class=form-group ng-show=dbSettingsCtrl.createNewSession><label for=setPoint class="col-md-2 control-label">New Session Name:</label><div class=col-md-10><input type=text class=form-control id=newSessionName placeholder=newSessionName ng-model=dbSettingsCtrl.newSessionName></div></div><div class=form-group ng-show=dbSettingsCtrl.createNewSession><div class="col-md-10 col-md-offset-2"><button type=button class="btn btn-default" ng-click=dbSettingsCtrl.cancel()>Cancel</button> <button type=button class="btn btn-info" ng-click=dbSettingsCtrl.submit(dbSettingsCtrl.newSessionName)>Submit</button></div></div><div class=form-group><div class="col-md-10 col-md-offset-2"><div class=checkbox><label><input type=checkbox ng-model=dbSettingsCtrl.enableDataLogging ng-click=dbSettingsCtrl.dataLogClick(dbSettingsCtrl.enableDataLogging)> Enable Data Logging</label></div></div></div><div class=row><div class=col-xs-12><button type=button class="btn btn-danger btn-block" ng-click=dbSettingsCtrl.done()>DONE</button></div></div><br><br><br><div class=row><div class=col-xs-12><button type=button class="btn btn-danger btn-block" ng-click=dbSettingsCtrl.clearSessionData()>Clear Session Data</button></div></div></form></div>'),t.put("App/rimsSettings/rimsSettingsForm.html",'<div ng-controller="rimsSettingsCtrl as rimsSettingsCtrl" class=container><form name=rimsForm class=form-horizontal><legend>RIMs settings</legend><div class=form-group><label for=setPoint class="col-md-2 control-label">setPoint</label><div class=col-md-10><input type=number min=0 class=form-control id=minutes placeholder=setPoint ng-model=rimsSettingsCtrl.settings.setPoint></div></div><div class=form-group><label for=windowSize class="col-md-2 control-label">Window Size</label><div class=col-md-10><input type=number min=0 class=form-control id=windowSize placeholder=windowSize ng-model=rimsSettingsCtrl.settings.windowSize></div></div><div class=form-group><label for=kp class="col-md-2 control-label">Kp</label><div class=col-md-10><input type=number min=0 class=form-control id=kp placeholder=kp ng-model=rimsSettingsCtrl.settings.kp></div></div><div class=form-group><label for=ki class="col-md-2 control-label">Ki</label><div class=col-md-10><input type=number min=0 class=form-control id=ki placeholder=ki ng-model=rimsSettingsCtrl.settings.ki></div></div><div class=form-group><label for=kd class="col-md-2 control-label">Kd</label><div class=col-md-10><input type=number min=0 class=form-control id=kd placeholder=kd ng-model=rimsSettingsCtrl.settings.kd></div></div><div class=form-group><div class="col-md-10 col-md-offset-2"><button type=button class="btn btn-default" ng-click=rimsSettingsCtrl.cancel()>Cancel</button> <button type=button class="btn btn-info" ng-click=rimsSettingsCtrl.submit(rimsSettingsCtrl.settings)>Start</button></div></div></form></div>'),t.put("App/settings/settingsForm.html",'<div ng-controller="settingsFormCtrl as settingsFormCtrl" class=container><form name=settingsForm class=form-horizontal><legend>Settings</legend><div class=form-group><div class="col-md-10 col-md-offset-2"><div class=checkbox><label><input type=checkbox ng-model=settingsFormCtrl.settings.showStatusLog> Show Status Log</label></div></div></div><div class="panel panel-default"><div class=panel-heading>Informational Popups</div><div class=panel-body><div class=form-group><div class="col-md-10 col-md-offset-2"><div class=checkbox><label><input type=checkbox ng-model=settingsFormCtrl.settings.showToast.error> Show Errors</label></div></div></div><div class=form-group><div class="col-md-10 col-md-offset-2"><div class=checkbox><label><input type=checkbox ng-model=settingsFormCtrl.settings.showToast.info> Show Info</label></div></div></div><div class=form-group><div class="col-md-10 col-md-offset-2"><div class=checkbox><label><input type=checkbox ng-model=settingsFormCtrl.settings.showToast.success> Show Success</label></div></div></div><div class=form-group><div class="col-md-10 col-md-offset-2"><div class=checkbox><label><input type=checkbox ng-model=settingsFormCtrl.settings.showToast.warning> Show Warning</label></div></div></div></div></div><div class=form-group><div class="col-md-5 col-md-offset-2 col-xs-6 text-info">Thermometer</div><div class="col-md-5 col-xs-6 text-info">Order</div></div><div ng-repeat="thermo in settingsFormCtrl.settings.thermos"><div class=form-group><div class="col-md-5 col-md-offset-2 col-xs-6" ng-hide=settingsFormCtrl.showThermoName[thermo.id] ng-click=settingsFormCtrl.clickThermoName(thermo)>{{thermo.name}}</div><div class="col-md-5 col-md-offset-2 col-xs-6" ng-show=settingsFormCtrl.showThermoName[thermo.id]><input type=text class="form-control input-sm" ng-model=thermo.name ng-blur=settingsFormCtrl.exitThermoName(thermo)></div><div class="col-md-5 col-xs-6" ng-hide=settingsFormCtrl.showThermoOrder[thermo.id] ng-click=settingsFormCtrl.clickThermoOrder(thermo)>{{thermo.order}}</div><div class="col-md-5 col-xs-6" ng-show=settingsFormCtrl.showThermoOrder[thermo.id]><input type=text class="form-control input-sm" ng-model=thermo.order ng-blur=settingsFormCtrl.exitThermoOrder(thermo)></div></div></div><div class=form-group><div class="col-md-10 col-md-offset-2"><button type=button class="btn btn-default" ng-click=settingsFormCtrl.cancel()>Cancel</button> <button type=button class="btn btn-info" ng-click=settingsFormCtrl.submit(settingsFormCtrl.settings)>Submit</button></div></div><div class=row><div class=col-xs-12><button type=button class="btn btn-danger btn-block" ng-click=settingsFormCtrl.clearSessionData()>Clear Session Data</button></div></div></form></div>'),t.put("App/statusLog/statusLog.html",'<div ng-controller="statusLogCtrl as sl"><pre class=statusLog>{{sl.statusInfo | json}}</pre></div>')
}]);